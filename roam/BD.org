#+TITLE: Basi di Dati
#+TEACHER: Luca Anselma (anselmaATdi.unito.it)
[[file:#universita.org][#universita]]
- Esame:
  - Scritto 70
    + Teoria
    + Lab - SQL
  - Laboratorio 30
    - Progettazione

- Testi di riferimento
  + Basi di Dati: Modelli e Linguaggi di Interrogazione (Atzeni, Ceri, Paraboschi, Torlone)
  + Sistemi di basi di dati: Fondamenti (Elmasri, Navathe)

* Basi di Dati Relazionali
** Modello Relazionale
Distinzione tra
- *schema* della base di dati
  - componente intenzionale
- *istanza* della base di dati
  - componente estenzionale
Costruttore: Relazione

_Anni 70 - Codd_
- inventa il modello relazionale a seguito dei modelli gerarchico e reticolare
  + basati su riferimenti espliciti con puntatori
- modello relazionale: basato sui valori stessi
  - per favorire l'indipendenza dei dati
- implementato poi in DBMS reali nel 1981
- Le relazioni hanno una naturale rappresentazione con le tabella

_3 Accezioni_
- Relazione matematica
- Relazione secondo il modello relazionale dei dati
- Relazione (Relationship) che rappresenta una classe di fatti in un modello Entity Relationship; traduzione alternativa *associazione*

- Relazione
  + sottoinsiemi di prodotti cartesiani
    - n-uple (basate su posizione)
    - tuple (non importa la posizione ma il nome (attributo) nella tebella)
      + un diverso concetto di relazione che quello matematico
- Tabelle
  + ordinamento tra righe irrilevante
  + ordinamento tra colonne irrilevante
  + le righe sono diverse fra loro
  + le intestazioni delle colonne sono diverse tra loro
  + ogni colonna ha valori omogenei
  + le tabelle sono in relazione tra loro attraverso i valori stessi degli attributi
    - indipendente dalle strutture fisiche, che possono cambiare dinamicamente
    - Si rappresenta solo cio' che e' rilevante dal punto di vista dell'applicazione
    - Portabilita' tra un DBMS ad un altro

- Schema di base di dati:
  + insieme di schemi di relazione
- (Istanza di) Relazione
  + su uno schema di relazione R(X) dave X sono attributi: insieme r di tuple su X
- (Istanza di) Base di dati
  + su uno schema di base di dati: insieme di relazioni $\{r_1, ... , r_h\}$

_Non sono permesse tabelle nidificate_ *prima forma normale*
- Informazione Incompleta
  + no valori tampone
  + valore extra: *NULL*
    - devono essere imposte restrizioni sulla presenza di valori nulli
  + casi - non distinti dai DBMS
    - valore sconosciuto
    - valore inesistente
    - senza informazione
*** Vincoli di integrita'
- si garantisce la correttezza della base di dati
- si garantisce coerenza tra i valori
- sono predicati logici che associano a ogni istanza un valore di verita'
- ad ogni cambiamento il DBMS verifica tutti i vincoli
- tipologie
  + intrarelazionali
    - vincoli di tupla
      + booleani di atomi che confrontano valori di attributo o espressioni aritmetiche su di essi
  + interrelazionali

**** Vincoli di chiave
- Superchiave
  + insieme di attributi usato per identificare univocamente le tuple di una relazione
  + un insieme di attributi $K$ e' detto superchiave di una relazione $r$ se $r$ non puo' contenere due tuple che hanno valori uguali su $K$
  + tutti i sottoinsiemi di una superchiave sono superchiavi
- Una chiave (candidata) di $r$ e' una superchiave minimale di $r$
  + non contiene una superchiave: se si toglie un attributo da $K$ allora $K$ non sara' piu' una superchiave
  + tutte le chiavi sono suporchiavi
  + l'insieme di tutti gli attributi di una relazione, pur essendo superchiave, non e' detto sia una chiave
- Una chiave primaria e' una particolare chiave di $r$ scelta dal progettista, e' una sola anche se le chiavi possono esse piu' di una
  + non puo' assumero valori nulli
  + e' rappresentata mediante sottolineatura
  + usata per stabilire corrispondanza tra relazioni
- Le chiavi sono utilizzate per fare riferimento a tuple in altre relazioni

**** Vincoli di integrita' referenziale
Vincoli foreign key
- tra relazioni diverse non possiamo utilizzare vincoli chiave con valori qualsiasi
  + questi vincoli hanno un verso
  + devono indicare valori gia' inseriti nella relazione referenziata
  + fatto riferimento a chiavi, non per forza primarie
***** Azioni compensative
- Standard
  + rifiuto dell'operazione
- Eliminazione in cascata
- Introduzione di valori nulli

** Algebra Relazionale
Formalizzata da Codd, per l'interrogazione di basi di dati
- e' una costruzione procedurale, un elenco di passi per eseguire l'interrogazione
- la risposta e' sempre un modello relazionale
- input: relazioni del modello relazionale
- output: relazione del modello relazionale
  + *relazione virtuale*
*** Operatori
_Di base_
- selezione - sigma
  + 0 le || le |r|
- proiezione - pi
  + 0 le || le |r|
  + non devono esserci ripetizioni nel risultato, viene compattato, altrimenti non sarebbe un insieme
  + se gli attrimuti proiettati formano una suporchiave allora la || eq |r|
- prodotto cartesiano
- unione
  - max(|r_1|,|r_2|) le || le |r_1|+|r_2|
- differenza
  - 0 le || le |r_1|
- ridenominazione - ro
_Derivati_
- intersezione
  + 0 le || le min(|r_1|,|r_2|)
- join
- quoziente
*** Predicati
Un'espressione booleana formata componendo predicati atomici
- attributo - costante
- attributo - attributo
  - '-' operatore di confronto

La cardinalita' di una predicato e' compresa tra 0 (relazione vuota) e la cardinalita' di r, se il predicato e' vero per ogni tupla

Per semplificare la lettura delle query si puo' scriverne gli alberi sintattici
** Calcolo Relazionale
** SQL (LAB)
* Programmazione di Basi di Dati
- Ciclo di vita di un sistema informativo:
  + Studio di fattibilita'
  + Raccolta e analisi dei requisiti
  + Progettazione
  + Implementazione
  + Validazione e collaudo
  + Funzionamento
- Modello 3-tier (ogni strato offre API)
  + User Interface
  + Business
  + Data
    - DBMS
- Fasi Progettazione
  + Raccolta e Analisi dei requisiti (informali)
  + Progettazione concettuale (indipendente dal DBMS)
    - separazione netta tra schema concettuale e logico
    - produce
      + schema ER
      + Documentazione complementare (business rules)
  + Progettazione logica
  + Progettazione fisica (Basi di dati II)

Il processo di riproduzione di uno schema concettuale a partire da una schema logico e' chiamato Reverse Engineering
** Metodologie e modello Entity-Relationship (LAB)
~ER~
Non modella il comportamento del sistema, come UML, ma _modella i dati_
*** Costrutti
**** Entita'
Rappresentano aspetti del mondo reale con esistenza "autonoma" ai fini della'applicazione
Sono rappresentate da rettangoli, hanno nomi propri e unici.
L'occorrenza di un'entita e' un oggetto della classe che l'entita rappresenta. Le entita' possono essere pensati come l'=insieme= delle loro occorrenze
Un'occorrenza di entita' non si riduce ai valori che la identificano: questo a differenza del modello relazionale
***** Attributi
Proprieta' delle entita' o associazioni che sono di interesse ai fini dell'applicazione
- dominio, insieme dei valori ammissibili per l'attributo
- linea con pallino vuoto
- possono essere composti se sono a loro volta divisi in sottoattributi
  - *questo non ha una corrispondenza nel modello relazionale*
- possono avere una cardinalita'
  + se non specificata si sottointende 1:1
  + attributi multivalore
    - costrutto non ammesso dal modello relazionale
      + ogni tupla ha un singolo valore
**** Associazione
Rappresentano legami logici tra due e piu' entita'
Sono rappresentate da rombi. Sono linee semplici che collegano le associazioni, non c'e' un verso di lettura.
Le Associazioni possono essere ricorsive.
- Simmetriche
- Non simmetriche
  + occorre specificare i versi che specificano la associazione
Le occorrenze di un'associazione fra due entita' sone le coppie delle occorrenze delle entita'.
Un'associazione puo' essere pensata come l'=insieme= delle sue occorrenze (essendo un'insieme non possono esserci duplicati)
- *cardinalita'* , numero di occorrenze dell'associazione a cui l'occorrenza di entita' puo' partecipare
  - nella pratica si usano
    - 0, 1 , n (minimo)
      + si usa piu' spesso una c.minima 0
        - perche' alla prima occorrevza di entita' spesso non esistono ancora le corrispondenti occorrenze delle entita' a essa collegate
    - 1, n     (massimo)
  - classificazioni (si considerano le cardinalita' massime a sx e dx)
    + molti a molti
    + uno a molti
    + uno a uno
**** Identificatori
Simile al concetto di chiave primaria ma *diverso*
- che e' un concetto del modello relazionale
  - *differenza* possiamo avere piu' identificatori allo stesso tempo, nel modello relazionale abbiamo una sola chiave primaria

Identificano univocamente le occorrenze di una entita', rappresentati da pallini pieni
Distinti in
- identificatore interno
  - attributi dell'entita'
- identificatore esterno
  - attributi dell'entita' e entita' esterne attraverso associazioni

Ogni entita' deve avere almeno un identificatore, questo per facilitare il passaggio al modello relazionale.

NB
- ogni attributo che fa parte di un identificatore deve avere cardinalita' (1,1)
- in id. esterna e' pollibile solo attraverso associazioni a cui l'entita' da identificare partecipa con cardinalita' (1,1)
- una id. esterna puo' convolgere entita' a loro volta identificate esternamene purche' non vengano generati cicli

**** Generalizzazioni
Mette in relazione una o piu' entita'
- E generalizzazione dei figli
- figli sono specializzazioni di E

- Proprieta'
  + ogni occorrenza di una specializzazione e' una occorrenza di E
  + ogni proprieta' di E e' una proprieta' dei figli, per ereditarieta'
- Classificazioni (combianabili)
  + Totale/Parziale
    - ogni occorrenza padre e' occorrenza di almeno una dei figli; altrimenti e' parziale
  + Esclusiva/Sovrapposta
    - ogni occorrenza padre e' occorrenza al piu' di una delle entita' figlie; altrimenti e' sovrapposta

- Sottoinsieme
  + generalizzazione con una sola entita' figlia

*** Documentazione
- Descrizione dei concetti
  + dizionario dei dati per le entita'
  + dizionario dei dati per le associazioni
- Vincoli non esprimibili in E-R (business rules)
  + Vincoli di integrita'
  + Vincoli di derivazione
** Progettazione Concettuale e Logica (LAB)
*** Concettuale
Analisi dei requisiti, spesso ambigui.
Vanno rimosse le ambiguita'
- fonti di requisiti
  + utenti
    - utenti diversi possono fornire info contraddittorie
      + vanno verificati gli aspetti essenziali e i casi limite
  + documentazione esistente
    - normative
    - regole interne
  + realizzazioni preesistenti

**** Pattern di progettazione
un ricettario di casi comuni di progettazione
- Reificazione di attributo di entita'
  - una associazione non puo' rappresentare cose che si ripetono
- Part-of
- Instance-of
- storicizzazione di un'entita'
  + generalizzazione
    - storico
      + aggiunge attributi (fine)
    - corrente
- storicizzazione di un'associazione
  + si sdoppia la associazione
  + o si reifica l'associazione e poi si generalizza quest'ultima
- evoluzione di concetto
- reificazione di associazione ternaria
  + permette di capire la correttezza dell'associazione ternaria

**** Strategie di progetto
- top-down
  + serie di raffinamenti successivi
  + aumenta il dettagli passo passo
  + entita' senza attributi e relazioni
    - poi concretizziamo aggiungendo dettagli
  + pro: si possono ignorare i dettagli inizialmente
  + contro: e' possibi solo se si possiede una visione gloxarlle di tutte le componenti
- bottom-up
  + partiamo da specifiche divise in parti elementari
    - di queste sono fatti i singoli schemi ER
  + poi aggreghiamo in uno schema finale
  + pro: le parti semplici sono da spartire e sviluppare a se stanti
  + contro: possono sorgere problemi nel aggregare schemi completamente diversi
- inside-out
  + individuiamo concetti chiave e partiamo da li'
  + ci espandiamo a partire da questi ultimi
  + pro: non richiede passi di integrazione
  + contro: ogni passo vanno riesaminati gli elementi presenti e non presenti
Nella pratica si utilizza una strategia ibrida
- vanno suddivisi i requisiti in componenti separati
- si forma uno schema scheletro
  + fa da base per successivi raffinamenti
   
**** Schema di Analisi
- Inizialmente
  + vanno specificate parole abigue, concetti simili tra loro
    - individuare omonimie (stessa parola ma diverso concetto) e sinonimie (stessa parola e stesso concetto)
      + posti (di impiego), posto (di nascita)
      + luoghi (di nascita), luogo (delle lezioni)
      + partecipanti, studenti
  + standardizzare la sintassi
    - per ENTITA' rappresentiamo ATTRIBUTI
  + costruire un glossario dei termini
    - termine | descrizione | sinonimi | collegamenti
    - ancora un lavoro linguistico, non corrispondono necessariamente alle entita'
- Strutturazione dei Requisiti in gruppi di frasi omogenee
  + Frasi relative ai partecipanti
  + Frasi relative ai datori di lavoro
  + Frasi relative ai corsi
  + Frasi relative a particolari partecipanti
  + Frasi relative ai docenti
- Operazioni (piu' impattanti sul sistema) sui dati
  + e frequenza
  + per assicurarci che i dati permettano di svolgere tutti le operazioni
  + per poter considerare l'efficienza del nostro schema logico piu' avanti
- Progettazione concettuale vera e propria
  + se un concetto da proprieta' significative e descrive oggetti con esistenza autonoma
    - *entita'*
  + se e' semplice e non ha proprieta'
    - *attributo* ad un'altra entita'
  + se correla due o piu' concetti
    - *associazione* (se non possono ripetersi, altrimenti dovra' essere un'altra entita')
  + se e' un caso  particolare di un altro
    - *generalizzazione*

**** Qualita' di uno schema ER
- Correttezza
- Completezza
- Leggibilita'
- Minimalita'
** Normalizzazione
* Sistemi per la gestione dei dati
** Metodi di accesso e indici
** Ottimizzatore logico e fisico
** Cenni
*** Gestione della concorrenza
*** Gestione del ripristino
* Definizioni
** Base di Dati
- accezione generica - ~metodologica~
  + insieme organizzato di dati utizizzati per il supporto allo svolgimento delle attivita di un ente
- accezione specifica - ~metodologica e tecnologica~
  + insieme di dati gestito da un =DBMS=
** DBMS
Data Base Management System
Componente Software specificamente dedicata alla gestione delle basi di dati
- Oracle DB
- PostreSQL
- MySQL
- Microsoft SQL Server
- Microsoft Access
- SQLite
  - contenuto in una libreria C (embedded)

Sistema che gestisce collezioni di dati
- grandi
  + non stanno in RAM
  + il limite deve essere solo quello fisico
- persistenti
  + tempo di vita non limitato alla singola esecuzione
- condivise
  + tra sistemi informativi
  + il DBMS fa da _mediatore_ tra database e applicativi
  + vantaggi
    - no ridondanza
    - no incoerenza
  + svantaggi
    - gestione della concorrenza
      + accessi contemporanei (gestiti dai DBMS)
- privatezza
  + meccanismi autorizzazione
- affidabilita'
  + resistenti a malfunzionamenti hardware e software
  + tecniche
    - gestione delle transazioni
- efficienza
  + i tempi devono essere accettabili
- efficacia

*** Architettura
utente - Schema Logico - Schema Interno - Base Dati
- Schema Logico
  + secondo un modello logico
- Schema Interno
  + specifico del DBMS utilizzato

Indipendenza tra livello Logico e Fisico
**** ANSI-SPARC
Architettura a tre livelli
utente - schema esterno - schema logico - schema interno - BD
- Schema Esterno
  - a partire dallo schema logico forma nuove =Viste=

** Indipendenza
*** Fisica
Livello logico e esterno sono indipendenti da quello fisico
- una relazione e' utilizzata allo stesso modo qualunque sia la realizzazione fisica
- la realizzazione fisica puo' cambiare senza problemi
*** Logica
Lo schema esterno e' indipendente da quello logico

** Transazione
Sequenza di operazioni considerate in modo atomico anche in presenza di concorrenza
La conclusione definitiva di una transazione corrisponde ad un impegno aka ~commit~

** Modello dei dati
Insieme dei costrutti utilizzati per organizzare i dati di interesse e descriverne la dinamica
- meccanismi di strutturazione
  + costruttori di tipo

*Modelli Concettuali*
- non disponibili nei DBMS
- modello utilizzato per la progettazione
- rappresentazione astratta
- =Entity Relationship=
*Modelli Logici*
- utilizzati da DBMS
  + =Relazionale=
  + Gerarchico
  + a oggetti
  + NoSQL
** Linguaggi
*** DML
Manipolazione, interrogazione e aggiornamento di istanze di basi di dati
*** DDL
Definizione di schemi (logici, esterni, fisici) e operazioni generali
** Sistema Informativo
NON necessariamente un Sistema Informatico (Questo ne e' una parte)
Componente che gestisce le informazioni di una Base Dati
- Raccolta
- Archiviazione
- Elaborazione
- Distribuzione
** Dato - Informazione
- dati: vanno elaborati
  + vanno interpretati
- informazioni
  + utilizzati nella interpretazioni di dati
